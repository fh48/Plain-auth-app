{"id":"../node_modules/ui-box/lib/utils/split-props.js","dependencies":[{"name":"/Users/fabianhinsenkamp/Documents/00_Learning_Projects/20_roundtableApp/plain-auth-app/package.json","includedInParent":true,"mtime":1569102829940},{"name":"/Users/fabianhinsenkamp/Documents/00_Learning_Projects/20_roundtableApp/plain-auth-app/node_modules/ui-box/package.json","includedInParent":true,"mtime":1563059785224}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitProps;\n/**\n * Utility to split props based on an array of keys\n */\nfunction splitProps(props, keys) {\n  var matchedProps = {};\n  var remainingProps = {};\n  var propKeys = Object.keys(props);\n\n  for (var i = 0; i < propKeys.length; i++) {\n    var propKey = propKeys[i];\n    var propValue = props[propKey];\n\n    if (keys.includes(propKey)) {\n      matchedProps[propKey] = propValue;\n    } else {\n      remainingProps[propKey] = propValue;\n    }\n  }\n\n  return { matchedProps: matchedProps, remainingProps: remainingProps };\n}\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/utils/split-props.js"],"names":["splitProps","props","keys","matchedProps","remainingProps","propKeys","Object","i","length","propKey","propValue","includes"],"mappings":";;;;;kBAGwBA,U;AAHxB;;;AAGe,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAC9C,MAAMC,eAAe,EAArB;AACA,MAAMC,iBAAiB,EAAvB;AACA,MAAMC,WAAWC,OAAOJ,IAAP,CAAYD,KAAZ,CAAjB;;AAEA,OAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,QAAME,UAAUJ,SAASE,CAAT,CAAhB;AACA,QAAMG,YAAYT,MAAMQ,OAAN,CAAlB;;AAEA,QAAIP,KAAKS,QAAL,CAAcF,OAAd,CAAJ,EAA4B;AAC1BN,mBAAaM,OAAb,IAAwBC,SAAxB;AACD,KAFD,MAEO;AACLN,qBAAeK,OAAf,IAA0BC,SAA1B;AACD;AACF;;AAED,SAAO,EAACP,0BAAD,EAAeC,8BAAf,EAAP;AACD","file":"split-props.js","sourcesContent":["/**\n * Utility to split props based on an array of keys\n */\nexport default function splitProps(props, keys) {\n  const matchedProps = {}\n  const remainingProps = {}\n  const propKeys = Object.keys(props)\n\n  for (let i = 0; i < propKeys.length; i++) {\n    const propKey = propKeys[i]\n    const propValue = props[propKey]\n\n    if (keys.includes(propKey)) {\n      matchedProps[propKey] = propValue\n    } else {\n      remainingProps[propKey] = propValue\n    }\n  }\n\n  return {matchedProps, remainingProps}\n}\n"]}},"error":null,"hash":"4c02c38dfb3eb7d925cd63ae2195a94d","cacheData":{"env":{}}}